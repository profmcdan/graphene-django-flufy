name: Continuous Integration & Delivery
on:
  push:
    branches: [main]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:
    branches: [ main, actions ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python: 3.10.8
            django: 4.1
            toxenv: py310-django41
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Set up Python ${{ matrix.python }} ${{ matrix.django }}
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip packages
        run: |
          pip install pip --upgrade
          pip install codecov poetry tox
      - name: "Run tox - testenv: ${{ matrix.toxenv }}"
        env:
          DJANGO: ${{ matrix.django }}
          TOXENV: ${{ matrix.toxenv }}
        run: tox
      - name: Run notification script
        env:
          GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          GITHUB_JOB_STATUS: ${{ job.status }}
          GITHUB_RUN_URL: ${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: ./scripts/notification.sh

  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python: 3.10.8
            toxenv: quality
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Set up Python ${{ matrix.python }}
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip packages
        run: |
          pip install pip --upgrade
          pip install poetry tox
      - name: "Run tox - testenv: ${{ matrix.toxenv }}"
        env:
          TOXENV: ${{ matrix.toxenv }}
        run: tox

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python: 3.10.8
            toxenv: security
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Set up Python ${{ matrix.python }}
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip packages
        run: |
          pip install pip --upgrade
          pip install poetry tox
      - name: "Run tox - testenv: ${{ matrix.toxenv }}"
        env:
          TOXENV: ${{ matrix.toxenv }}
        run: tox

  publish:
    needs:
      - test
      - security
      - quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python: 3.10.8
            toxenv: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Set up Python ${{ matrix.python }}
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip packages
        run: |
          pip install pip --upgrade
          pip install poetry tox toml
      - name: Bump package version
        run: ./scripts/bump.py --dry-run no
      - name: "Build package - testenv: ${{ matrix.toxenv }}"
        env:
          TOXENV: ${{ matrix.toxenv }}
        run: tox
      - name: "Publish - testenv: ${{ matrix.toxenv }}"
        env:
          PYPI_ACCESS_TOKEN: ${{ secrets.PYPI_TOKEN }}
          # Values production 'https://pypi.org/', testing 'https://test.pypi.org/legacy/'
          PYPI_REPOSITORY_URL: https://pypi.org/
          # Values production 'pypi', testing 'testpypi'
          PYPI_REPOSITORY: pypi
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          # poetry config repositories.$PYPI_REPOSITORY $PYPI_REPOSITORY_URL
          # poetry publish -r $PYPI_REPOSITORY -u $PYPI_USERNAME
        run: |
          poetry config pypi-token.pypi $PYPI_ACCESS_TOKEN
          poetry publish
      - name: Create bump commit
        uses: EndBug/add-and-commit@latest
        with:
          author_name: github_actions
          author_email: github_actions
          message: "cd: PR Auto bumping package version"
          add: pyproject.toml
